
Led_Matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000202  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  00000202  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000b8  008000b8  000002ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ee  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002be  00000000  00000000  00000356  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000144  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001ba  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000006c  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000216  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f0  00000000  00000000  00000b96  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000d86  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 eb       	ldi	r26, 0xB8	; 184
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3b       	cpi	r26, 0xBD	; 189
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f7 00 	call	0x1ee	; 0x1ee <main>
  8a:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Display_MINs>:

unsigned char Minutes,Hours,Seconds;
unsigned int Adjustment_Delay;

void Display_MINs(unsigned char Number)
{
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	e0 eb       	ldi	r30, 0xB0	; 176
  98:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned char Unit_Digit,Tenth_Digit,Matrix_Column;
	Unit_Digit=Number%10u;  
	Tenth_Digit=Number/10u;  
  9a:	9d ec       	ldi	r25, 0xCD	; 205
  9c:	89 9f       	mul	r24, r25
  9e:	91 2d       	mov	r25, r1
  a0:	11 24       	eor	r1, r1
  a2:	96 95       	lsr	r25
  a4:	96 95       	lsr	r25
  a6:	96 95       	lsr	r25
	for(Matrix_Column=0;Matrix_Column<Column_Numbers;Matrix_Column++)
	{
		PORTC=Active_Pin[Matrix_Column];
		PORTD=((Numbers_To_Display[Tenth_Digit][Matrix_Column])<<4)|(Numbers_To_Display[Unit_Digit][Matrix_Column]);
  a8:	c9 2f       	mov	r28, r25
  aa:	d0 e0       	ldi	r29, 0x00	; 0
  ac:	cc 0f       	add	r28, r28
  ae:	dd 1f       	adc	r29, r29
  b0:	cc 0f       	add	r28, r28
  b2:	dd 1f       	adc	r29, r29
  b4:	cc 0f       	add	r28, r28
  b6:	dd 1f       	adc	r29, r29
  b8:	c0 5a       	subi	r28, 0xA0	; 160
  ba:	df 4f       	sbci	r29, 0xFF	; 255
unsigned int Adjustment_Delay;

void Display_MINs(unsigned char Number)
{
	unsigned char Unit_Digit,Tenth_Digit,Matrix_Column;
	Unit_Digit=Number%10u;  
  bc:	99 0f       	add	r25, r25
  be:	29 2f       	mov	r18, r25
  c0:	22 0f       	add	r18, r18
  c2:	22 0f       	add	r18, r18
  c4:	92 0f       	add	r25, r18
  c6:	89 1b       	sub	r24, r25
	Tenth_Digit=Number/10u;  
	for(Matrix_Column=0;Matrix_Column<Column_Numbers;Matrix_Column++)
	{
		PORTC=Active_Pin[Matrix_Column];
		PORTD=((Numbers_To_Display[Tenth_Digit][Matrix_Column])<<4)|(Numbers_To_Display[Unit_Digit][Matrix_Column]);
  c8:	a8 2f       	mov	r26, r24
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	aa 0f       	add	r26, r26
  ce:	bb 1f       	adc	r27, r27
  d0:	aa 0f       	add	r26, r26
  d2:	bb 1f       	adc	r27, r27
  d4:	aa 0f       	add	r26, r26
  d6:	bb 1f       	adc	r27, r27
  d8:	a0 5a       	subi	r26, 0xA0	; 160
  da:	bf 4f       	sbci	r27, 0xFF	; 255
  dc:	28 eb       	ldi	r18, 0xB8	; 184
  de:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char Unit_Digit,Tenth_Digit,Matrix_Column;
	Unit_Digit=Number%10u;  
	Tenth_Digit=Number/10u;  
	for(Matrix_Column=0;Matrix_Column<Column_Numbers;Matrix_Column++)
	{
		PORTC=Active_Pin[Matrix_Column];
  e0:	81 91       	ld	r24, Z+
  e2:	85 bb       	out	0x15, r24	; 21
		PORTD=((Numbers_To_Display[Tenth_Digit][Matrix_Column])<<4)|(Numbers_To_Display[Unit_Digit][Matrix_Column]);
  e4:	89 91       	ld	r24, Y+
  e6:	4d 91       	ld	r20, X+
  e8:	50 e1       	ldi	r21, 0x10	; 16
  ea:	85 9f       	mul	r24, r21
  ec:	c0 01       	movw	r24, r0
  ee:	11 24       	eor	r1, r1
  f0:	84 2b       	or	r24, r20
  f2:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8b e2       	ldi	r24, 0x2B	; 43
  f6:	91 e0       	ldi	r25, 0x01	; 1
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <Display_MINs+0x66>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <Display_MINs+0x6c>
  fe:	00 00       	nop
void Display_MINs(unsigned char Number)
{
	unsigned char Unit_Digit,Tenth_Digit,Matrix_Column;
	Unit_Digit=Number%10u;  
	Tenth_Digit=Number/10u;  
	for(Matrix_Column=0;Matrix_Column<Column_Numbers;Matrix_Column++)
 100:	e2 17       	cp	r30, r18
 102:	f3 07       	cpc	r31, r19
 104:	69 f7       	brne	.-38     	; 0xe0 <Display_MINs+0x4e>
	{
		PORTC=Active_Pin[Matrix_Column];
		PORTD=((Numbers_To_Display[Tenth_Digit][Matrix_Column])<<4)|(Numbers_To_Display[Unit_Digit][Matrix_Column]);
		_delay_us(150);
	}	
}
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	08 95       	ret

0000010c <Display_HRs>:

void Display_HRs(unsigned char Number)
{
 10c:	cf 93       	push	r28
 10e:	df 93       	push	r29
 110:	e0 eb       	ldi	r30, 0xB0	; 176
 112:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned char Unit_Digit,Tenth_Digit,Matrix_Column;
	Unit_Digit=Number%10u;  
	Tenth_Digit=Number/10u;  
 114:	9d ec       	ldi	r25, 0xCD	; 205
 116:	89 9f       	mul	r24, r25
 118:	91 2d       	mov	r25, r1
 11a:	11 24       	eor	r1, r1
 11c:	96 95       	lsr	r25
 11e:	96 95       	lsr	r25
 120:	96 95       	lsr	r25
	for(Matrix_Column=0;Matrix_Column<Column_Numbers;Matrix_Column++)
	{
		PORTA=Active_Pin[Matrix_Column];
		PORTB=((Numbers_To_Display[Tenth_Digit][Matrix_Column])<<4)|(Numbers_To_Display[Unit_Digit][Matrix_Column]);
 122:	c9 2f       	mov	r28, r25
 124:	d0 e0       	ldi	r29, 0x00	; 0
 126:	cc 0f       	add	r28, r28
 128:	dd 1f       	adc	r29, r29
 12a:	cc 0f       	add	r28, r28
 12c:	dd 1f       	adc	r29, r29
 12e:	cc 0f       	add	r28, r28
 130:	dd 1f       	adc	r29, r29
 132:	c0 5a       	subi	r28, 0xA0	; 160
 134:	df 4f       	sbci	r29, 0xFF	; 255
}

void Display_HRs(unsigned char Number)
{
	unsigned char Unit_Digit,Tenth_Digit,Matrix_Column;
	Unit_Digit=Number%10u;  
 136:	99 0f       	add	r25, r25
 138:	29 2f       	mov	r18, r25
 13a:	22 0f       	add	r18, r18
 13c:	22 0f       	add	r18, r18
 13e:	92 0f       	add	r25, r18
 140:	89 1b       	sub	r24, r25
	Tenth_Digit=Number/10u;  
	for(Matrix_Column=0;Matrix_Column<Column_Numbers;Matrix_Column++)
	{
		PORTA=Active_Pin[Matrix_Column];
		PORTB=((Numbers_To_Display[Tenth_Digit][Matrix_Column])<<4)|(Numbers_To_Display[Unit_Digit][Matrix_Column]);
 142:	a8 2f       	mov	r26, r24
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	aa 0f       	add	r26, r26
 148:	bb 1f       	adc	r27, r27
 14a:	aa 0f       	add	r26, r26
 14c:	bb 1f       	adc	r27, r27
 14e:	aa 0f       	add	r26, r26
 150:	bb 1f       	adc	r27, r27
 152:	a0 5a       	subi	r26, 0xA0	; 160
 154:	bf 4f       	sbci	r27, 0xFF	; 255
 156:	28 eb       	ldi	r18, 0xB8	; 184
 158:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char Unit_Digit,Tenth_Digit,Matrix_Column;
	Unit_Digit=Number%10u;  
	Tenth_Digit=Number/10u;  
	for(Matrix_Column=0;Matrix_Column<Column_Numbers;Matrix_Column++)
	{
		PORTA=Active_Pin[Matrix_Column];
 15a:	81 91       	ld	r24, Z+
 15c:	8b bb       	out	0x1b, r24	; 27
		PORTB=((Numbers_To_Display[Tenth_Digit][Matrix_Column])<<4)|(Numbers_To_Display[Unit_Digit][Matrix_Column]);
 15e:	89 91       	ld	r24, Y+
 160:	4d 91       	ld	r20, X+
 162:	50 e1       	ldi	r21, 0x10	; 16
 164:	85 9f       	mul	r24, r21
 166:	c0 01       	movw	r24, r0
 168:	11 24       	eor	r1, r1
 16a:	84 2b       	or	r24, r20
 16c:	88 bb       	out	0x18, r24	; 24
 16e:	8b e2       	ldi	r24, 0x2B	; 43
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <Display_HRs+0x66>
 176:	00 c0       	rjmp	.+0      	; 0x178 <Display_HRs+0x6c>
 178:	00 00       	nop
void Display_HRs(unsigned char Number)
{
	unsigned char Unit_Digit,Tenth_Digit,Matrix_Column;
	Unit_Digit=Number%10u;  
	Tenth_Digit=Number/10u;  
	for(Matrix_Column=0;Matrix_Column<Column_Numbers;Matrix_Column++)
 17a:	e2 17       	cp	r30, r18
 17c:	f3 07       	cpc	r31, r19
 17e:	69 f7       	brne	.-38     	; 0x15a <Display_HRs+0x4e>
	{
		PORTA=Active_Pin[Matrix_Column];
		PORTB=((Numbers_To_Display[Tenth_Digit][Matrix_Column])<<4)|(Numbers_To_Display[Unit_Digit][Matrix_Column]);
		_delay_us(150);
	}
}
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	08 95       	ret

00000186 <Clock_Run>:

void Clock_Run(void)
{
	for (Hours=0;Hours<24;Hours++)
 186:	10 92 b8 00 	sts	0x00B8, r1
	{
		for(Minutes=0;Minutes<60;Minutes++)
 18a:	10 92 b9 00 	sts	0x00B9, r1
		{
			for (Seconds=0;Seconds<60;Seconds++)
 18e:	10 92 ba 00 	sts	0x00BA, r1
			{
				for(Adjustment_Delay=0;Adjustment_Delay<416;Adjustment_Delay++)
 192:	10 92 bc 00 	sts	0x00BC, r1
 196:	10 92 bb 00 	sts	0x00BB, r1
				{
					Display_HRs(Hours);
 19a:	80 91 b8 00 	lds	r24, 0x00B8
 19e:	0e 94 86 00 	call	0x10c	; 0x10c <Display_HRs>
					Display_MINs(Minutes);
 1a2:	80 91 b9 00 	lds	r24, 0x00B9
 1a6:	0e 94 49 00 	call	0x92	; 0x92 <Display_MINs>
	{
		for(Minutes=0;Minutes<60;Minutes++)
		{
			for (Seconds=0;Seconds<60;Seconds++)
			{
				for(Adjustment_Delay=0;Adjustment_Delay<416;Adjustment_Delay++)
 1aa:	80 91 bb 00 	lds	r24, 0x00BB
 1ae:	90 91 bc 00 	lds	r25, 0x00BC
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	90 93 bc 00 	sts	0x00BC, r25
 1b8:	80 93 bb 00 	sts	0x00BB, r24
 1bc:	80 3a       	cpi	r24, 0xA0	; 160
 1be:	91 40       	sbci	r25, 0x01	; 1
 1c0:	60 f3       	brcs	.-40     	; 0x19a <Clock_Run+0x14>
{
	for (Hours=0;Hours<24;Hours++)
	{
		for(Minutes=0;Minutes<60;Minutes++)
		{
			for (Seconds=0;Seconds<60;Seconds++)
 1c2:	80 91 ba 00 	lds	r24, 0x00BA
 1c6:	8f 5f       	subi	r24, 0xFF	; 255
 1c8:	80 93 ba 00 	sts	0x00BA, r24
 1cc:	8c 33       	cpi	r24, 0x3C	; 60
 1ce:	08 f3       	brcs	.-62     	; 0x192 <Clock_Run+0xc>

void Clock_Run(void)
{
	for (Hours=0;Hours<24;Hours++)
	{
		for(Minutes=0;Minutes<60;Minutes++)
 1d0:	80 91 b9 00 	lds	r24, 0x00B9
 1d4:	8f 5f       	subi	r24, 0xFF	; 255
 1d6:	80 93 b9 00 	sts	0x00B9, r24
 1da:	8c 33       	cpi	r24, 0x3C	; 60
 1dc:	c0 f2       	brcs	.-80     	; 0x18e <Clock_Run+0x8>
	}
}

void Clock_Run(void)
{
	for (Hours=0;Hours<24;Hours++)
 1de:	80 91 b8 00 	lds	r24, 0x00B8
 1e2:	8f 5f       	subi	r24, 0xFF	; 255
 1e4:	80 93 b8 00 	sts	0x00B8, r24
 1e8:	88 31       	cpi	r24, 0x18	; 24
 1ea:	78 f2       	brcs	.-98     	; 0x18a <Clock_Run+0x4>
			}
			
		}
	}
	
}
 1ec:	08 95       	ret

000001ee <main>:

int main(void)
{
	myDDRA = 0xFF;  //hrs columns
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	8a bb       	out	0x1a, r24	; 26
	myDDRB = 0xFF;  //hrs rows
 1f2:	87 bb       	out	0x17, r24	; 23
	myDDRC = 0xFF;  //min columns
 1f4:	84 bb       	out	0x14, r24	; 20
	myDDRD = 0xFF;  //min rows
 1f6:	81 bb       	out	0x11, r24	; 17
	
	while(1)
	{
		Clock_Run();	
 1f8:	0e 94 c3 00 	call	0x186	; 0x186 <Clock_Run>
 1fc:	fd cf       	rjmp	.-6      	; 0x1f8 <main+0xa>

000001fe <_exit>:
 1fe:	f8 94       	cli

00000200 <__stop_program>:
 200:	ff cf       	rjmp	.-2      	; 0x200 <__stop_program>

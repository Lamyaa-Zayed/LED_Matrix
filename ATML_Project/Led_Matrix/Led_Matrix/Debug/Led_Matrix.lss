
Led_Matrix.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  000001b0  00000244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008000b8  008000b8  0000029c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000027e  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018e  00000000  00000000  0000057a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000018e  00000000  00000000  00000708  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00000898  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000215  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000112  00000000  00000000  00000b05  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000c17  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 eb       	ldi	r30, 0xB0	; 176
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 3b       	cpi	r26, 0xB8	; 184
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 eb       	ldi	r26, 0xB8	; 184
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 3b       	cpi	r26, 0xBD	; 189
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ce 00 	call	0x19c	; 0x19c <main>
  8a:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Display_LED_Matrix>:

unsigned char Minutes,Hours,Seconds;
unsigned int Adjustment_Delay;

void Display_LED_Matrix(unsigned char Number,volatile unsigned char *const Display_PORT)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	df 93       	push	r29
  9a:	e0 eb       	ldi	r30, 0xB0	; 176
  9c:	f0 e0       	ldi	r31, 0x00	; 0
	unsigned char Unit_Digit,Tenth_Digit,Matrix_Column;
	Unit_Digit=Number%10u;
	Tenth_Digit=Number/10u;
  9e:	9d ec       	ldi	r25, 0xCD	; 205
  a0:	89 9f       	mul	r24, r25
  a2:	91 2d       	mov	r25, r1
  a4:	11 24       	eor	r1, r1
  a6:	96 95       	lsr	r25
  a8:	96 95       	lsr	r25
  aa:	96 95       	lsr	r25
	for(Matrix_Column=0;Matrix_Column<Column_Numbers;Matrix_Column++)
	{
		ACT_PORT=Active_Pin[Matrix_Column];
		*Display_PORT=((Numbers_To_Display[Tenth_Digit][Matrix_Column])<<4)|(Numbers_To_Display[Unit_Digit][Matrix_Column]);
  ac:	c9 2f       	mov	r28, r25
  ae:	d0 e0       	ldi	r29, 0x00	; 0
  b0:	cc 0f       	add	r28, r28
  b2:	dd 1f       	adc	r29, r29
  b4:	cc 0f       	add	r28, r28
  b6:	dd 1f       	adc	r29, r29
  b8:	cc 0f       	add	r28, r28
  ba:	dd 1f       	adc	r29, r29
  bc:	c0 5a       	subi	r28, 0xA0	; 160
  be:	df 4f       	sbci	r29, 0xFF	; 255
unsigned int Adjustment_Delay;

void Display_LED_Matrix(unsigned char Number,volatile unsigned char *const Display_PORT)
{
	unsigned char Unit_Digit,Tenth_Digit,Matrix_Column;
	Unit_Digit=Number%10u;
  c0:	99 0f       	add	r25, r25
  c2:	29 2f       	mov	r18, r25
  c4:	22 0f       	add	r18, r18
  c6:	22 0f       	add	r18, r18
  c8:	92 0f       	add	r25, r18
  ca:	89 1b       	sub	r24, r25
	Tenth_Digit=Number/10u;
	for(Matrix_Column=0;Matrix_Column<Column_Numbers;Matrix_Column++)
	{
		ACT_PORT=Active_Pin[Matrix_Column];
		*Display_PORT=((Numbers_To_Display[Tenth_Digit][Matrix_Column])<<4)|(Numbers_To_Display[Unit_Digit][Matrix_Column]);
  cc:	a8 2f       	mov	r26, r24
  ce:	b0 e0       	ldi	r27, 0x00	; 0
  d0:	aa 0f       	add	r26, r26
  d2:	bb 1f       	adc	r27, r27
  d4:	aa 0f       	add	r26, r26
  d6:	bb 1f       	adc	r27, r27
  d8:	aa 0f       	add	r26, r26
  da:	bb 1f       	adc	r27, r27
  dc:	8d 01       	movw	r16, r26
  de:	00 5a       	subi	r16, 0xA0	; 160
  e0:	1f 4f       	sbci	r17, 0xFF	; 255
  e2:	28 eb       	ldi	r18, 0xB8	; 184
  e4:	30 e0       	ldi	r19, 0x00	; 0
	unsigned char Unit_Digit,Tenth_Digit,Matrix_Column;
	Unit_Digit=Number%10u;
	Tenth_Digit=Number/10u;
	for(Matrix_Column=0;Matrix_Column<Column_Numbers;Matrix_Column++)
	{
		ACT_PORT=Active_Pin[Matrix_Column];
  e6:	81 91       	ld	r24, Z+
  e8:	8b bb       	out	0x1b, r24	; 27
		*Display_PORT=((Numbers_To_Display[Tenth_Digit][Matrix_Column])<<4)|(Numbers_To_Display[Unit_Digit][Matrix_Column]);
  ea:	89 91       	ld	r24, Y+
  ec:	d8 01       	movw	r26, r16
  ee:	4d 91       	ld	r20, X+
  f0:	8d 01       	movw	r16, r26
  f2:	b0 e1       	ldi	r27, 0x10	; 16
  f4:	8b 9f       	mul	r24, r27
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
  fa:	84 2b       	or	r24, r20
  fc:	db 01       	movw	r26, r22
  fe:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	8b e2       	ldi	r24, 0x2B	; 43
 102:	91 e0       	ldi	r25, 0x01	; 1
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <Display_LED_Matrix+0x72>
 108:	00 c0       	rjmp	.+0      	; 0x10a <Display_LED_Matrix+0x78>
 10a:	00 00       	nop
void Display_LED_Matrix(unsigned char Number,volatile unsigned char *const Display_PORT)
{
	unsigned char Unit_Digit,Tenth_Digit,Matrix_Column;
	Unit_Digit=Number%10u;
	Tenth_Digit=Number/10u;
	for(Matrix_Column=0;Matrix_Column<Column_Numbers;Matrix_Column++)
 10c:	e2 17       	cp	r30, r18
 10e:	f3 07       	cpc	r31, r19
 110:	51 f7       	brne	.-44     	; 0xe6 <Display_LED_Matrix+0x54>
	{
		ACT_PORT=Active_Pin[Matrix_Column];
		*Display_PORT=((Numbers_To_Display[Tenth_Digit][Matrix_Column])<<4)|(Numbers_To_Display[Unit_Digit][Matrix_Column]);
		_delay_us(150);
	}
	*Display_PORT=LED_Matrix_OFF;
 112:	db 01       	movw	r26, r22
 114:	1c 92       	st	X, r1
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	08 95       	ret

00000120 <Clock_Run>:

void Clock_Run(void)
{
	for (Hours=0;Hours<24;Hours++)
 120:	10 92 b8 00 	sts	0x00B8, r1
	{
		for(Minutes=0;Minutes<60;Minutes++)
 124:	10 92 b9 00 	sts	0x00B9, r1
		{
			for (Seconds=0;Seconds<60;Seconds++)
 128:	10 92 ba 00 	sts	0x00BA, r1
			{
				for(Adjustment_Delay=0;Adjustment_Delay<Adjustment_Delay_Number;Adjustment_Delay++)
 12c:	10 92 bc 00 	sts	0x00BC, r1
 130:	10 92 bb 00 	sts	0x00BB, r1
				{

					Display_LED_Matrix(Hours,&HRS_PORT);
 134:	68 e3       	ldi	r22, 0x38	; 56
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	80 91 b8 00 	lds	r24, 0x00B8
 13c:	0e 94 49 00 	call	0x92	; 0x92 <Display_LED_Matrix>
					Display_LED_Matrix(Minutes,&MINS_PORT);
 140:	62 e3       	ldi	r22, 0x32	; 50
 142:	70 e0       	ldi	r23, 0x00	; 0
 144:	80 91 b9 00 	lds	r24, 0x00B9
 148:	0e 94 49 00 	call	0x92	; 0x92 <Display_LED_Matrix>
					Display_LED_Matrix(Seconds,&SECS_PORT);
 14c:	65 e3       	ldi	r22, 0x35	; 53
 14e:	70 e0       	ldi	r23, 0x00	; 0
 150:	80 91 ba 00 	lds	r24, 0x00BA
 154:	0e 94 49 00 	call	0x92	; 0x92 <Display_LED_Matrix>
	{
		for(Minutes=0;Minutes<60;Minutes++)
		{
			for (Seconds=0;Seconds<60;Seconds++)
			{
				for(Adjustment_Delay=0;Adjustment_Delay<Adjustment_Delay_Number;Adjustment_Delay++)
 158:	80 91 bb 00 	lds	r24, 0x00BB
 15c:	90 91 bc 00 	lds	r25, 0x00BC
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	90 93 bc 00 	sts	0x00BC, r25
 166:	80 93 bb 00 	sts	0x00BB, r24
 16a:	86 31       	cpi	r24, 0x16	; 22
 16c:	91 40       	sbci	r25, 0x01	; 1
 16e:	10 f3       	brcs	.-60     	; 0x134 <Clock_Run+0x14>
{
	for (Hours=0;Hours<24;Hours++)
	{
		for(Minutes=0;Minutes<60;Minutes++)
		{
			for (Seconds=0;Seconds<60;Seconds++)
 170:	80 91 ba 00 	lds	r24, 0x00BA
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 ba 00 	sts	0x00BA, r24
 17a:	8c 33       	cpi	r24, 0x3C	; 60
 17c:	b8 f2       	brcs	.-82     	; 0x12c <Clock_Run+0xc>

void Clock_Run(void)
{
	for (Hours=0;Hours<24;Hours++)
	{
		for(Minutes=0;Minutes<60;Minutes++)
 17e:	80 91 b9 00 	lds	r24, 0x00B9
 182:	8f 5f       	subi	r24, 0xFF	; 255
 184:	80 93 b9 00 	sts	0x00B9, r24
 188:	8c 33       	cpi	r24, 0x3C	; 60
 18a:	70 f2       	brcs	.-100    	; 0x128 <Clock_Run+0x8>
	*Display_PORT=LED_Matrix_OFF;
}

void Clock_Run(void)
{
	for (Hours=0;Hours<24;Hours++)
 18c:	80 91 b8 00 	lds	r24, 0x00B8
 190:	8f 5f       	subi	r24, 0xFF	; 255
 192:	80 93 b8 00 	sts	0x00B8, r24
 196:	88 31       	cpi	r24, 0x18	; 24
 198:	28 f2       	brcs	.-118    	; 0x124 <Clock_Run+0x4>
			}
			
		}
	}
	
}
 19a:	08 95       	ret

0000019c <main>:

int main(void)
{
	myDDRA = PORT_OUTPUT;  //hrs columns
 19c:	8f ef       	ldi	r24, 0xFF	; 255
 19e:	8a bb       	out	0x1a, r24	; 26
	myDDRB = PORT_OUTPUT;  //hrs rows
 1a0:	87 bb       	out	0x17, r24	; 23
	myDDRC = PORT_OUTPUT;  //min columns
 1a2:	84 bb       	out	0x14, r24	; 20
	myDDRD = PORT_OUTPUT;  //min rows
 1a4:	81 bb       	out	0x11, r24	; 17
	
	while(1)
	{
		Clock_Run();	
 1a6:	0e 94 90 00 	call	0x120	; 0x120 <Clock_Run>
 1aa:	fd cf       	rjmp	.-6      	; 0x1a6 <main+0xa>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
